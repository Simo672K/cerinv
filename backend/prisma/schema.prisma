// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String    @unique
  password   String
  profile    Profile?
  user       Session[]
  events     Event[]
  invitees   Invitee[]
  isVerified Boolean   @default(false)
  createdAt  DateTime  @default(now())
}

model Session {
  id               String    @id @default(uuid())
  isValid          Boolean   @default(true)
  refreshTokenHash String    @unique
  userId           Int
  user             User      @relation(fields: [userId], references: [id])
  createAt         DateTime  @default(now())
  updatedAt        DateTime?
}

model Profile {
  id        Int       @id @default(autoincrement())
  username  String?
  avatar    String?
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id])
  accessId  Int
  access    Access    @relation(fields: [accessId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

model Access {
  id        Int       @id @default(autoincrement())
  role      Role      @default(USER)
  profiles  Profile[]
  createdAt DateTime  @default(now())
}

model InviteTemplate {
  id        Int       @id @default(autoincrement())
  template  String
  events    Event[]
  createdAt DateTime? @default(now())
  updatedAt DateTime?
}

model Event {
  id   Int    @id @default(autoincrement())
  name String

  startDate  DateTime
  duration   Int
  mesurement Mesurement @default(HOUR)
  startHour  String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  inviteTemplateId Int
  inviteTemplate   InviteTemplate @relation(fields: [inviteTemplateId], references: [id])

  invitations Invitation[]
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?
}

model Invitee {
  id            Int          @id @default(autoincrement())
  fullName      String
  phoneNumber   String?
  email         String?
  addedByUserId Int
  addedByUser   User         @relation(fields: [addedByUserId], references: [id])
  invitations   Invitation[]
  createdAt     DateTime?    @default(now())
}

model Invitation {
  id        String    @id @default(uuid())
  inviteeId Int
  invitee   Invitee   @relation(fields: [inviteeId], references: [id])
  eventId   Int
  event     Event     @relation(fields: [eventId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime?
}

// enums
enum Role {
  USER
  ADMIN
  STAFF
}

enum Mesurement {
  DAY
  HOUR
  MINUTE
}
